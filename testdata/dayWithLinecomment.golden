
const _DayName = "lunesTuesdayWednesdayThursdayviernesSaturdaySunday"

var _DayIndex = [...]uint8{0, 5, 12, 21, 29, 36, 44, 50}

const _DayLowerName = "lunestuesdaywednesdaythursdayviernessaturdaysunday"

func (i Day) string() (string, error) {
	if i < 0 || i >= Day(len(_DayIndex)-1) {
		return "", fmt.Errorf("value is out of enum range")
	}
	return _DayName[_DayIndex[i]:_DayIndex[i+1]], nil
}

func (i Day) String() string {
	val, _ := i.string()
	return val
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DayNoOp() {
	var x [1]struct{}
	_ = x[Monday-(0)]
	_ = x[Tuesday-(1)]
	_ = x[Wednesday-(2)]
	_ = x[Thursday-(3)]
	_ = x[Friday-(4)]
	_ = x[Saturday-(5)]
	_ = x[Sunday-(6)]
}

var _DayValues = []Day{Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}

var _DayNameToValueMap = map[string]Day{
	_DayName[0:5]:        Monday,
	_DayLowerName[0:5]:   Monday,
	_DayName[5:12]:       Tuesday,
	_DayLowerName[5:12]:  Tuesday,
	_DayName[12:21]:      Wednesday,
	_DayLowerName[12:21]: Wednesday,
	_DayName[21:29]:      Thursday,
	_DayLowerName[21:29]: Thursday,
	_DayName[29:36]:      Friday,
	_DayLowerName[29:36]: Friday,
	_DayName[36:44]:      Saturday,
	_DayLowerName[36:44]: Saturday,
	_DayName[44:50]:      Sunday,
	_DayLowerName[44:50]: Sunday,
}

var _DayNames = []string{
	_DayName[0:5],
	_DayName[5:12],
	_DayName[12:21],
	_DayName[21:29],
	_DayName[29:36],
	_DayName[36:44],
	_DayName[44:50],
}

// DayString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DayString(s string) (Day, error) {
	if val, ok := _DayNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DayNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Day values", s)
}

// DayValues returns all values of the enum
func DayValues() []Day {
	return _DayValues
}

// DayStrings returns a slice of all String values of the enum
func DayStrings() []string {
	strs := make([]string, len(_DayNames))
	copy(strs, _DayNames)
	return strs
}

// IsADay returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Day) IsADay() bool {
	for _, v := range _DayValues {
		if i == v {
			return true
		}
	}
	return false
}
